[**GradioLink](https://0bb7afb06c4cd3e05e.gradio.live/)**        GitHubLink          [CollabLink](https://colab.research.google.com/drive/1tX_0wPEYNs_6mxJ_MTJTiU0UaiJxszCS?usp=sharing)

***Credits:*** 

Thank you Hamza for teaching us AI concepts and handholding us to build this amazing AI search prototype

Product Creation/Owner - Laahiri Gunda

## **What is ExploreAI?**

***ExploreAI*** is your AI Assistant to search hotels in ***Miami*** that suits your requirements. It is powered with AI intelligence that provides hotel recommendations based on user query. It enables user to dive deep into recommendations further by providing references to relevant web Links

## Who are the intended users of the product?

This product is designed for anyone looking for hotel information in Miami.

## **How the product is built?**

Following steps were followed to build the AI Assistant. 

1. Data Loading and Data processing
2. Data chunking and vector embeddings creation
3. Store and query vector embeddings 
4. Implementing RAG pipeline and connecting with an LLM
5. Creating Gradio interface for “***ExploreAI”***

### Data Loading and Data processing

- In this step, we loaded our Miami hotels data set from [Github](https://raw.githubusercontent.com/hamzafarooq/maven-mlsystem-design-cohort-1/main/data/miami_hotels.csv) and cleaned the data by dropping columns with null values.
- We then created “content” and “metadata” from the dataset which is further used for data chunking in next steps.

### Data chunk text documents for efficient retrieval

- In this step, we chunked our “data” using recursive_split method with a chunk size of 1000 and created overlap of 200 characters to ensure the context is maintained. This enables efficient retrieval.
- Next, we used AutoTokenizer, AutoModel models and created embeddings of above created data chunks

### Store and query vector embeddings

- We used Qdrant vector database to store our embeddings data.
- We used “memory” version of Qdrant, which creates an **in-memory instance of Qdrant.** It is like a normal Qdrant server, however data is **stored in RAM only. All the data is lost**  when the script ends or notebook restarts. This is ideal for **testing, prototyping, or small-scale demos**
- To ensure we don't lose our embeddings data, we loaded the vector data file into google drive location. This enables us to access the embeddings in offline mode and does not need to create embeddings every time. Refer below image where miami hotel search data is stored under Qdrant_data.

![image.png](attachment:c647387d-5471-4655-8b3d-9d47d1adc4e9:image.png)

### Implementing RAG pipeline and connecting with an LLM

- We defined the *Qdrant client* to connect to vector data base, which has the embeddings data we stored in google drive.
- We then defined *****OpenRouter client* to serve as the language model (LLM) for the pipeline.
- We then import the same embedding model used in earlier step to create embeddings. This ensures consistency
- We created a retriever function to extract relevant chunks from the documents. We defined a function to search the Qdrant vector database against *user provided query* using a natural language query. Once the search is complete, we get the recommendations/results that match the user query

### Creating Gradio interface for “***ExploreAI”***

- Now that we have the search results, we will now build a Gradio interface to provide a UI based search experience for users.  **Gradio** is an open-source Python library that lets us build **interactive user interfaces (UIs)** for machine learning models, APIs, or any Python functions — quickly and easily.
- To display the search results in natural language to the users, we used  "qwen/qwen3-8b:free" model and converted the search results into natural language by giving a prompt to the model.
- We also created few example queries for user to select and retrieve recommendations. Refer to below images to have a sneak peak into ***ExploreAI*** Assistant

***Explore AI* built on Gradio Interface**

![image.png](attachment:e095fdbe-1f6c-4271-a452-fd129eda30b5:image.png)

***ExploreAI*** recommendations on **“Budget friendly hotels with Miami beach view and has indian food available”** 

![image.png](attachment:e8ee9f1b-ea2b-4fbf-a7a8-82a36a65caed:image.png)

***ExploreAI*** recommendations on **“Luxury hotels in Miami”** 

![image.png](attachment:1177e83c-6bd9-4cb1-ac5d-d08a3ccda2b7:image.png)
